---

- name: Get the current caller identity information
  amazon.aws.aws_caller_info:
  register: aws_info

- name: Create iam role for sdg login
  community.aws.iam_role:
    name: "{{ email_role }}"
    assume_role_policy_document: "{{ lookup('ansible.builtin.template','email_lambda_policy.json.j2') }}"
    description: "Policy for billing email lambda"
    managed_policies: []
- name: Apply policy to iam role
  vars:
    region: "{{ region }}"
  community.aws.iam_policy:
    iam_type: role
    iam_name: "{{ email_role }}"
    policy_name: "{{ item.name }}"
    policy_json: "{{ lookup('ansible.builtin.template', item.json) }}"
  loop:
    - name: allowCostExplorerRead
      json: allow_cost_explorer_read.json.j2
    - name: allowSESSendEmail
      json: allow_ses_send_email.json.j2
    - name: AWSLambdaBasicExecutionRole
      json: aws_lambda_basic_execution_role.json.j2


# see https://docs.ansible.com/ansible/latest/collections/amazon/aws/lambda_module.html
- name: Deploy lambda
  community.aws.lambda:
    name: "{{ aws_lambda }}"
    description: Function to email cost breakout data based on tags/service from Cost Explorer
    region: "{{ region }}"
    s3_bucket: billing-lambda-src
    s3_key: generate_report.py.zip
    runtime: "python3.8"
    role: "arn:aws:iam::{{ aws_info.account }}:role/{{ aws_lambda }}"
    handler: "generate_report.lambda_handler"
    memory_size: 128
    timeout: 5

# TODO way to add layers from Amazon? AWSSDKPandas-Python38

# see https://docs.ansible.com/ansible/latest/collections/community/aws/cloudwatchevent_rule_module.html
- community.aws.cloudwatchevent_rule:
    name: "lambda_{{ aws_lambda }}"
    region: "{{ region }}"
    schedule_expression: "{{ eventbridge_schedule }}"
    description: Run billing report Lambda on schedule
    targets:
      - id: MyTargetId
        arn: arn:aws:lambda:{{ region }}:{{ aws_info.account }}:function:{{ aws_lambda }}
        input: '{"tag-key": "Department", "tag-value": "", "tag-value-default": "MSS", "days": 180, "show-chart": "0", "email-from": "eepps2@illinois.edu", "email-to": "eepps2@illinois.edu"}'

# Example that creates a lambda event notification for a DynamoDB stream
#- name: Add trigger to EventBridge/CloudWatch event
#  community.aws.lambda_event:
#    state: present
#    region: "{{ region }}"
#    event_source: sqs
#    function_name: "{{ aws_lambda }}"
#    source_params:
#      source_arn: "arn:aws:events:{{ region }}:{{ aws_info.account }}:rule/lambda_{{ aws_lambda }}"
#      enabled: True

